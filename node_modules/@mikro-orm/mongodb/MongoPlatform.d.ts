import { ObjectId } from 'bson';
import type { IPrimaryKey, Primary, NamingStrategy, Constructor, EntityRepository, EntityProperty, PopulateOptions, EntityMetadata, IDatabaseDriver, EntityManager, Configuration, MikroORM } from '@mikro-orm/core';
import { Platform } from '@mikro-orm/core';
import { MongoExceptionConverter } from './MongoExceptionConverter';
import { MongoSchemaGenerator } from './MongoSchemaGenerator';
export declare class MongoPlatform extends Platform {
    protected readonly exceptionConverter: MongoExceptionConverter;
    setConfig(config: Configuration): void;
    getNamingStrategy(): {
        new (): NamingStrategy;
    };
    getRepositoryClass<T extends object>(): Constructor<EntityRepository<T>>;
    /** @inheritDoc */
    lookupExtensions(orm: MikroORM): void;
    getSchemaGenerator(driver: IDatabaseDriver, em?: EntityManager): MongoSchemaGenerator;
    getMigrator(em: EntityManager): any;
    normalizePrimaryKey<T extends number | string = number | string>(data: Primary<T> | IPrimaryKey | ObjectId): T;
    denormalizePrimaryKey(data: number | string): IPrimaryKey;
    getSerializedPrimaryKeyField(field: string): string;
    usesDifferentSerializedPrimaryKey(): boolean;
    usesImplicitTransactions(): boolean;
    convertsJsonAutomatically(marshall?: boolean): boolean;
    marshallArray(values: string[]): string;
    cloneEmbeddable<T>(data: T): T;
    shouldHaveColumn<T>(prop: EntityProperty<T>, populate: PopulateOptions<T>[]): boolean;
    validateMetadata(meta: EntityMetadata): void;
    isAllowedTopLevelOperator(operator: string): boolean;
}
